# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from common import boxes_pb2 as boxes__pb2


class ConnectorStub(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTableNames = channel.unary_unary(
                '/boxes.Connector/GetTableNames',
                request_serializer=boxes__pb2.Empty.SerializeToString,
                response_deserializer=boxes__pb2.TableNames.FromString,
                )
        self.GetTableSchemas = channel.unary_unary(
                '/boxes.Connector/GetTableSchemas',
                request_serializer=boxes__pb2.TableNames.SerializeToString,
                response_deserializer=boxes__pb2.TableSchemas.FromString,
                )
        self.GetTable = channel.unary_unary(
                '/boxes.Connector/GetTable',
                request_serializer=boxes__pb2.TableName.SerializeToString,
                response_deserializer=boxes__pb2.Table.FromString,
                )


class ConnectorServicer(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    def GetTableNames(self, request, context):
        """Get table schemas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableSchemas(self, request, context):
        """Get table schemas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
        """Get table contents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTableNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableNames,
                    request_deserializer=boxes__pb2.Empty.FromString,
                    response_serializer=boxes__pb2.TableNames.SerializeToString,
            ),
            'GetTableSchemas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableSchemas,
                    request_deserializer=boxes__pb2.TableNames.FromString,
                    response_serializer=boxes__pb2.TableSchemas.SerializeToString,
            ),
            'GetTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTable,
                    request_deserializer=boxes__pb2.TableName.FromString,
                    response_serializer=boxes__pb2.Table.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boxes.Connector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connector(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    @staticmethod
    def GetTableNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Connector/GetTableNames',
            boxes__pb2.Empty.SerializeToString,
            boxes__pb2.TableNames.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTableSchemas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Connector/GetTableSchemas',
            boxes__pb2.TableNames.SerializeToString,
            boxes__pb2.TableSchemas.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Connector/GetTable',
            boxes__pb2.TableName.SerializeToString,
            boxes__pb2.Table.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AlgorithmsStub(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Max = channel.unary_unary(
                '/boxes.Algorithms/Max',
                request_serializer=boxes__pb2.DoubleList.SerializeToString,
                response_deserializer=boxes__pb2.DoubleValue.FromString,
                )
        self.Min = channel.unary_unary(
                '/boxes.Algorithms/Min',
                request_serializer=boxes__pb2.DoubleList.SerializeToString,
                response_deserializer=boxes__pb2.DoubleValue.FromString,
                )
        self.Average = channel.unary_unary(
                '/boxes.Algorithms/Average',
                request_serializer=boxes__pb2.DoubleList.SerializeToString,
                response_deserializer=boxes__pb2.DoubleValue.FromString,
                )
        self.Median = channel.unary_unary(
                '/boxes.Algorithms/Median',
                request_serializer=boxes__pb2.DoubleList.SerializeToString,
                response_deserializer=boxes__pb2.DoubleValue.FromString,
                )


class AlgorithmsServicer(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    def Max(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Min(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Average(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Median(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgorithmsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Max': grpc.unary_unary_rpc_method_handler(
                    servicer.Max,
                    request_deserializer=boxes__pb2.DoubleList.FromString,
                    response_serializer=boxes__pb2.DoubleValue.SerializeToString,
            ),
            'Min': grpc.unary_unary_rpc_method_handler(
                    servicer.Min,
                    request_deserializer=boxes__pb2.DoubleList.FromString,
                    response_serializer=boxes__pb2.DoubleValue.SerializeToString,
            ),
            'Average': grpc.unary_unary_rpc_method_handler(
                    servicer.Average,
                    request_deserializer=boxes__pb2.DoubleList.FromString,
                    response_serializer=boxes__pb2.DoubleValue.SerializeToString,
            ),
            'Median': grpc.unary_unary_rpc_method_handler(
                    servicer.Median,
                    request_deserializer=boxes__pb2.DoubleList.FromString,
                    response_serializer=boxes__pb2.DoubleValue.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boxes.Algorithms', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Algorithms(object):
    """---------------------------------------------------------------------------------------------------------------------

    """

    @staticmethod
    def Max(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Algorithms/Max',
            boxes__pb2.DoubleList.SerializeToString,
            boxes__pb2.DoubleValue.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Min(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Algorithms/Min',
            boxes__pb2.DoubleList.SerializeToString,
            boxes__pb2.DoubleValue.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Average(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Algorithms/Average',
            boxes__pb2.DoubleList.SerializeToString,
            boxes__pb2.DoubleValue.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Median(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Algorithms/Median',
            boxes__pb2.DoubleList.SerializeToString,
            boxes__pb2.DoubleValue.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class DataEngineStub(object):
    """---------------------------------------------------------------------------------------------------------------------


    Data engine känner till alla tabeller i alla connectorer
    Den håller en tabell med alla tabeller och huruvida de är laddade eller ej
    Den laddar tabeller till en sqlite in memory databas vid behov, mha namnkonvention borde vi kunna hitta tabeller i queries
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteQuery = channel.unary_unary(
                '/boxes.DataEngine/ExecuteQuery',
                request_serializer=boxes__pb2.Query.SerializeToString,
                response_deserializer=boxes__pb2.Table.FromString,
                )


class DataEngineServicer(object):
    """---------------------------------------------------------------------------------------------------------------------


    Data engine känner till alla tabeller i alla connectorer
    Den håller en tabell med alla tabeller och huruvida de är laddade eller ej
    Den laddar tabeller till en sqlite in memory databas vid behov, mha namnkonvention borde vi kunna hitta tabeller i queries
    """

    def ExecuteQuery(self, request, context):
        """Plot x antal axlar
        Axel kategorisk eller numerisk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteQuery,
                    request_deserializer=boxes__pb2.Query.FromString,
                    response_serializer=boxes__pb2.Table.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boxes.DataEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataEngine(object):
    """---------------------------------------------------------------------------------------------------------------------


    Data engine känner till alla tabeller i alla connectorer
    Den håller en tabell med alla tabeller och huruvida de är laddade eller ej
    Den laddar tabeller till en sqlite in memory databas vid behov, mha namnkonvention borde vi kunna hitta tabeller i queries
    """

    @staticmethod
    def ExecuteQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.DataEngine/ExecuteQuery',
            boxes__pb2.Query.SerializeToString,
            boxes__pb2.Table.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class BackendStub(object):
    """---------------------------------------------------------------------------------------------------------------------

    Backend to all GUI clients

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialise = channel.unary_unary(
                '/boxes.Backend/Initialise',
                request_serializer=boxes__pb2.ConfigFile.SerializeToString,
                response_deserializer=boxes__pb2.Empty.FromString,
                )
        self.GetCharts = channel.unary_unary(
                '/boxes.Backend/GetCharts',
                request_serializer=boxes__pb2.Empty.SerializeToString,
                response_deserializer=boxes__pb2.ChartCollection.FromString,
                )
        self.GetPlotValues = channel.unary_unary(
                '/boxes.Backend/GetPlotValues',
                request_serializer=boxes__pb2.PlotName.SerializeToString,
                response_deserializer=boxes__pb2.PlotValues.FromString,
                )
        self.GetLoadedTables = channel.unary_unary(
                '/boxes.Backend/GetLoadedTables',
                request_serializer=boxes__pb2.Empty.SerializeToString,
                response_deserializer=boxes__pb2.TableCollection.FromString,
                )
        self.GetAllTableNames = channel.unary_unary(
                '/boxes.Backend/GetAllTableNames',
                request_serializer=boxes__pb2.Empty.SerializeToString,
                response_deserializer=boxes__pb2.TableNames.FromString,
                )
        self.GetTableSchemas = channel.unary_unary(
                '/boxes.Backend/GetTableSchemas',
                request_serializer=boxes__pb2.TableNames.SerializeToString,
                response_deserializer=boxes__pb2.TableSchemas.FromString,
                )
        self.GetTable = channel.unary_unary(
                '/boxes.Backend/GetTable',
                request_serializer=boxes__pb2.TableName.SerializeToString,
                response_deserializer=boxes__pb2.Table.FromString,
                )
        self.AddChart = channel.unary_unary(
                '/boxes.Backend/AddChart',
                request_serializer=boxes__pb2.ChartInfo.SerializeToString,
                response_deserializer=boxes__pb2.Empty.FromString,
                )
        self.RemoveChart = channel.unary_unary(
                '/boxes.Backend/RemoveChart',
                request_serializer=boxes__pb2.ChartName.SerializeToString,
                response_deserializer=boxes__pb2.Empty.FromString,
                )
        self.LoadTable = channel.unary_unary(
                '/boxes.Backend/LoadTable',
                request_serializer=boxes__pb2.TableName.SerializeToString,
                response_deserializer=boxes__pb2.TableCollection.FromString,
                )
        self.UnloadTable = channel.unary_unary(
                '/boxes.Backend/UnloadTable',
                request_serializer=boxes__pb2.TableName.SerializeToString,
                response_deserializer=boxes__pb2.TableCollection.FromString,
                )


class BackendServicer(object):
    """---------------------------------------------------------------------------------------------------------------------

    Backend to all GUI clients

    """

    def Initialise(self, request, context):
        """Initialises the backend by loading charts/tables accoring to configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCharts(self, request, context):
        """-- Procedures used to display charts ------------------------------------------------------------------------------

        Get all charts (actual graph window) contaning all plots (each line/scat/bar-collection), excluding actual values
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlotValues(self, request, context):
        """Get x/y values for a certain plot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoadedTables(self, request, context):
        """Get information on the loaded plots
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTableNames(self, request, context):
        """-- Procedures used to display tables ------------------------------------------------------------------------------

        Get table schemas available in data engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableSchemas(self, request, context):
        """Get table schemas from data engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
        """Get table contents from loaded table or from one in data engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddChart(self, request, context):
        """-- Procedures modifying the saved configuration, typically by the used defining or modifying plots/tables ---------

        Add chart (and save this configuration in the yaml config)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveChart(self, request, context):
        """Remove chart (and save this configuration in the yaml config)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadTable(self, request, context):
        """Load table from data engine (and save this configuration in the yaml config)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadTable(self, request, context):
        """Unload table from backend (and save this configuration in the yaml config)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialise': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialise,
                    request_deserializer=boxes__pb2.ConfigFile.FromString,
                    response_serializer=boxes__pb2.Empty.SerializeToString,
            ),
            'GetCharts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharts,
                    request_deserializer=boxes__pb2.Empty.FromString,
                    response_serializer=boxes__pb2.ChartCollection.SerializeToString,
            ),
            'GetPlotValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlotValues,
                    request_deserializer=boxes__pb2.PlotName.FromString,
                    response_serializer=boxes__pb2.PlotValues.SerializeToString,
            ),
            'GetLoadedTables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoadedTables,
                    request_deserializer=boxes__pb2.Empty.FromString,
                    response_serializer=boxes__pb2.TableCollection.SerializeToString,
            ),
            'GetAllTableNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTableNames,
                    request_deserializer=boxes__pb2.Empty.FromString,
                    response_serializer=boxes__pb2.TableNames.SerializeToString,
            ),
            'GetTableSchemas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableSchemas,
                    request_deserializer=boxes__pb2.TableNames.FromString,
                    response_serializer=boxes__pb2.TableSchemas.SerializeToString,
            ),
            'GetTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTable,
                    request_deserializer=boxes__pb2.TableName.FromString,
                    response_serializer=boxes__pb2.Table.SerializeToString,
            ),
            'AddChart': grpc.unary_unary_rpc_method_handler(
                    servicer.AddChart,
                    request_deserializer=boxes__pb2.ChartInfo.FromString,
                    response_serializer=boxes__pb2.Empty.SerializeToString,
            ),
            'RemoveChart': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveChart,
                    request_deserializer=boxes__pb2.ChartName.FromString,
                    response_serializer=boxes__pb2.Empty.SerializeToString,
            ),
            'LoadTable': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadTable,
                    request_deserializer=boxes__pb2.TableName.FromString,
                    response_serializer=boxes__pb2.TableCollection.SerializeToString,
            ),
            'UnloadTable': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadTable,
                    request_deserializer=boxes__pb2.TableName.FromString,
                    response_serializer=boxes__pb2.TableCollection.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boxes.Backend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Backend(object):
    """---------------------------------------------------------------------------------------------------------------------

    Backend to all GUI clients

    """

    @staticmethod
    def Initialise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/Initialise',
            boxes__pb2.ConfigFile.SerializeToString,
            boxes__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCharts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetCharts',
            boxes__pb2.Empty.SerializeToString,
            boxes__pb2.ChartCollection.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlotValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetPlotValues',
            boxes__pb2.PlotName.SerializeToString,
            boxes__pb2.PlotValues.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoadedTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetLoadedTables',
            boxes__pb2.Empty.SerializeToString,
            boxes__pb2.TableCollection.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllTableNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetAllTableNames',
            boxes__pb2.Empty.SerializeToString,
            boxes__pb2.TableNames.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTableSchemas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetTableSchemas',
            boxes__pb2.TableNames.SerializeToString,
            boxes__pb2.TableSchemas.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/GetTable',
            boxes__pb2.TableName.SerializeToString,
            boxes__pb2.Table.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddChart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/AddChart',
            boxes__pb2.ChartInfo.SerializeToString,
            boxes__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveChart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/RemoveChart',
            boxes__pb2.ChartName.SerializeToString,
            boxes__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/LoadTable',
            boxes__pb2.TableName.SerializeToString,
            boxes__pb2.TableCollection.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnloadTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boxes.Backend/UnloadTable',
            boxes__pb2.TableName.SerializeToString,
            boxes__pb2.TableCollection.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
